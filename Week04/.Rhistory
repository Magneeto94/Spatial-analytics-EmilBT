library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
getwd()
# Read in the trees shapefile
trees <- st_read("../Week02/data/trees.shp")
library(tidyverse)
library(tidyverse)
library(sf)
library(raster)
library(tidyverse)
library(sf)
library(raster)
# Read in the trees shapefile
trees <- st_read("../Week02/data/trees.shp")
# Read in the neighborhood shapefile
neighborhoods <- st_read("data/neighborhoods.shp")
# Read in the neighborhood shapefile
neighborhoods <- st_read("../Week02/data/neighborhoods.shp")
landmarks <-
# Read in the tree canopy single-band raster
canopy <- raster("../Week02/data/canopy.tif")
# Read in the manhattan Landsat image multi-band raster
manhattan <- brick("../Week02/data/manhattan.tif")
# Read in the impervious single-band raster
impervious <- raster("../Week02/data/impervious.tif")
# Read in the parks object
parks <- st_read("../Week02/data/parks.shp")
# Project parks to match canopy
parks_cp <- st_transform(parks, crs = crs(canopy, asText = TRUE))
# Compute the area of the parks
areas <- st_area(parks_cp)
# Filter to parks with areas > 30000
parks_big <- filter(parks_cp, areas > 30000)
# Filter to parks with areas > 30000
parks_big <- filter(parks_cp, unclass(areas) > 30000)
# Filter to parks with areas > 30000
parks_big <- filter(parks_cp, unclass(areas > 30000))
help("unclass")
#Unclass noget med at konverterer dataen.
class(areas)
# Plot the canopy raster
plot(canopy)
# Plot the geometry of parks_big
plot(st_geometry(parks_big))
# Convert parks to a Spatial object
parks_sp <- as(parks_big, "Spatial") #"as" konverterer til spacial
# Mask the canopy layer with parks_sp and save as canopy_mask
canopy_mask <- mask(canopy, mask = parks_sp)
plot(canopy_mask)
plot(st_geometry(canopy_mask))
plot((canopy_mask)
plot((canopy_mask)
plot(canopy_mask)
# Plot the canopy raster
plot(canopy)
# Plot the geometry of parks_big
plot(st_geometry(parks_big))
# Convert parks to a Spatial object
parks_sp <- as(parks_big, "Spatial")
# Convert the parks_big to a Spatial object
parks_sp <- as(parks_big, "spatial")
# Convert the parks_big to a Spatial object
parks_sp <- as(parks_big, "Spatial")
# Mask the canopy with the large parks
canopy_mask <- mask(canopy, mask = parks_sp)
# Plot the mask
plot(canopy_mask)
# Crop canopy with parks_sp
canopy_crop <- crop(canopy, parks_sp)
# Plot the cropped version and compare
plot(canopy_crop)
# Plot the mask
plot(canopy_mask)
# Plot the cropped version and compare
plot(canopy_crop)
# Plot the canopy raster
plot(canopy)
# Create a landmarks dataframe
ldf <- data.frame(place = c("Empire State Building", "Museum of Natural History", "Central Park (The Ramble)"),
longitude=c(-73.98566,-73.97398, -73.96964),
latitude=c(40.74844,40.78132, 40.77734))
# Convert the data frame to an sf object
landmarks <- st_as_sf(ldf, coords = c("longitude", "latitude"), crs =4326)
# Project the landmarks to match canopy
landmarks_cp <- st_transform(landmarks, crs = crs(canopy, add = TRUE))
# Extract the canopy values at the landmarks
landmarks_ex <- raster::extract(canopy, landmarks_cp)
# Look at the landmarks and extraction results
landmarks_cp
landmarks_ex
# Look at the landmarks and extraction results
landmarks_cp
View(landmarks_cp)
landmarks_ex
# Read in the canopy and impervious layer
canopy <- st_read("../Week02/data/canopy.tif")
# Read in the canopy and impervious layer
canopy <- st_read("canopy.tif")
# Read in the canopy and impervious layer
canopy <- raster("../Week02/data/canopy.tif")
# Read in the canopy and impervious layer
canopy <- raster("../Week02/data/canopy.tif")
impervious <- raster("../Week02/data/impervious.tif")
# Function f with 2 arguments and the raster math code
f <- function(rast1, rast2) {
rast1 < 20 & rast2 > 80
}
# Do the overlay using f as fun
canopy_imperv_overlay <- f(canopy, impervious, fun = f)
# Function f with 2 arguments and the raster math code
f <- function(rast1, rast2) {
rast1 < 20 & rast2 > 80
}
# Do the overlay using f as fun
canopy_imperv_overlay <- f(canopy, impervious, fun = f)
