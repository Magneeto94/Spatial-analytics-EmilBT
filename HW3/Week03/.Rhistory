tm_shape(ten_buffers)  +
tm_polygons(col = "blue") +
tm_shape(ten_cities) +
tm_text("Ancient Toponym", size = 16, auto.placement = 5) +
tm_dots(col = "yellow",
size = 0.1) +
tm_scale_bar(breaks = 0, 10, 20,
text.size = 10,
position = c("LEFT", "bottom")) +
tm_compass(position = c("LEFT", "bottom"),
type = "rose",
size = 2) +
tm_credits(position = c("RIGHT", "top"),
text = "Hej hej, text") +
tm_layout(main.title = "Map with a scale",
bg.color = "beige",
inner.margins = c(0, 0, 0, 0))
# Grab the first 10 elements in the sf object and the buffer
ten_buffers <- cities_5km %>% slice(1:10)
ten_cities <- cities_5km %>% slice(1:10)
tm_shape(ten_buffers)  +
tm_polygons(col = "blue") +
tm_shape(ten_cities) +
tm_text("Ancient Toponym", size = 16, auto.placement = 5) +
tm_dots(col = "yellow",
size = 0.1) +
tm_scale_bar(breaks = 0, 10, 20,
text.size = 10,
position = c("LEFT", "bottom")) +
tm_compass(position = c("LEFT", "bottom"),
type = "rose",
size = 2) +
tm_credits(position = c("RIGHT", "top"),
text = "Hej hej, text") +
tm_layout(main.title = "Map with a scale",
bg.color = "beige",
inner.margins = c(0, 0, 0, 0))
# Grab the first 10 elements in the sf object and the buffer
ten_buffers <- cities_5km %>% slice(1:10)
ten_cities <- cities_sf3035 %>% slice(1:10)
# Create a quick tmap
library(tmap)
current.mode <- tmap_mode("plot")
tm_shape(ten_buffers)  +
tm_polygons(col = "blue") +
tm_shape(ten_cities) +
tm_text("Ancient Toponym", size = 16, auto.placement = 5) +
tm_dots(col = "yellow",
size = 0.1) +
tm_scale_bar(breaks = 0, 10, 20,
text.size = 10,
position = c("LEFT", "bottom")) +
tm_compass(position = c("LEFT", "bottom"),
type = "rose",
size = 2) +
tm_credits(position = c("RIGHT", "top"),
text = "Hej hej, text") +
tm_layout(main.title = "Map with a scale",
bg.color = "beige",
inner.margins = c(0, 0, 0, 0))
tm_shape(ten_buffers)  +
tm_polygons(col = "blue") +
tm_shape(ten_cities) +
tm_text("Ancient Toponym", size = 16, auto.placement = 5) +
tm_dots(col = "yellow",
size = 0.1) +
tm_scale_bar(breaks = 5,
text.size = 10,
position = c("LEFT", "bottom")) +
tm_compass(position = c("LEFT", "bottom"),
type = "rose",
size = 2) +
tm_credits(position = c("RIGHT", "top"),
text = "Hej hej, text") +
tm_layout(main.title = "Map with a scale",
bg.color = "beige",
inner.margins = c(0, 0, 0, 0))
tm_shape(ten_buffers)  +
tm_polygons(col = "blue") +
tm_shape(ten_cities) +
tm_text("Ancient Toponym", size = 5, auto.placement = 5) +
tm_dots(col = "yellow",
size = 0.1) +
tm_scale_bar(breaks = 5,
text.size = 10,
position = c("LEFT", "bottom")) +
tm_compass(position = c("LEFT", "bottom"),
type = "rose",
size = 2) +
tm_credits(position = c("RIGHT", "top"),
text = "Hej hej, text") +
tm_layout(main.title = "Map with a scale",
bg.color = "beige",
inner.margins = c(0, 0, 0, 0))
tm_shape(ten_buffers)  +
tm_polygons(col = "blue") +
tm_shape(ten_cities) +
tm_text("Ancient Toponym", size = 100, auto.placement = 5) +
tm_dots(col = "yellow",
size = 0.1) +
tm_scale_bar(breaks = 5,
text.size = 10,
position = c("LEFT", "bottom")) +
tm_compass(position = c("LEFT", "bottom"),
type = "rose",
size = 2) +
tm_credits(position = c("RIGHT", "top"),
text = "Hej hej, text") +
tm_layout(main.title = "Map with a scale",
bg.color = "beige",
inner.margins = c(0, 0, 0, 0))
tm_shape(ten_buffers)  +
tm_polygons(col = "blue") +
tm_shape(ten_cities) +
tm_text("Ancient Toponym", size = 100, auto.placement = 5) +
tm_dots(col = "yellow",
size = 0.1) +
tm_scale_bar(breaks = 0, 5, 10,
text.size = 10,
position = c("LEFT", "bottom")) +
tm_compass(position = c("LEFT", "bottom"),
type = "rose",
size = 2) +
tm_credits(position = c("RIGHT", "top"),
text = "Hej hej, text") +
tm_layout(main.title = "Map with a scale",
bg.color = "beige",
inner.margins = c(0, 0, 0, 0))
tm_shape(ten_buffers)  +
tm_polygons(col = "blue") +
tm_shape(ten_cities) +
tm_text("Ancient Toponym", size = 20, auto.placement = 5) +
tm_dots(col = "yellow",
size = 0.1) +
tm_scale_bar(breaks = 0, 5, 10,
text.size = 10,
position = c("LEFT", "bottom")) +
tm_compass(position = c("LEFT", "bottom"),
type = "rose",
size = 2) +
tm_credits(position = c("RIGHT", "top"),
text = "Hej hej, text") +
tm_layout(main.title = "Map with a scale",
bg.color = "beige",
inner.margins = c(0, 0, 0, 0))
tm_shape(ten_buffers)  +
tm_polygons(col = "blue") +
tm_shape(ten_cities) +
tm_text("Ancient Toponym", size = 1, auto.placement = 5) +
tm_dots(col = "yellow",
size = 0.1) +
tm_scale_bar(breaks = 0, 5, 10,
text.size = 10,
position = c("LEFT", "bottom")) +
tm_compass(position = c("LEFT", "bottom"),
type = "rose",
size = 2) +
tm_credits(position = c("RIGHT", "top"),
text = "Hej hej, text") +
tm_layout(main.title = "Map with a scale",
bg.color = "beige",
inner.margins = c(0, 0, 0, 0))
tm_shape(ten_buffers)  +
tm_polygons(col = "blue") +
tm_shape(ten_cities) +
tm_text("Ancient Toponym", size = 1, auto.placement = 5) +
tm_dots(col = "yellow",
size = 0.1) +
tm_scale_bar(breaks = c(0, 5, 10),
text.size = 10,
position = c("LEFT", "bottom")) +
tm_compass(position = c("LEFT", "bottom"),
type = "rose",
size = 2) +
tm_credits(position = c("RIGHT", "top"),
text = "Hej hej, text") +
tm_layout(main.title = "Map with a scale",
bg.color = "beige",
inner.margins = c(0, 0, 0, 0))
tm_shape(ten_buffers)  +
tm_polygons(col = "blue") +
tm_shape(ten_cities) +
tm_text("Ancient Toponym", size = 1, auto.placement = 5) +
tm_dots(col = "yellow",
size = 0.1) +
tm_scale_bar(breaks = c(0, 10, 20, 40, 80),
text.size = 10,
position = c("LEFT", "bottom")) +
tm_compass(position = c("LEFT", "bottom"),
type = "rose",
size = 2) +
tm_credits(position = c("RIGHT", "top"),
text = "Hej hej, text") +
tm_layout(main.title = "Map with a scale",
bg.color = "beige",
inner.margins = c(0, 0, 0, 0))
tm_shape(ten_buffers)  +
tm_polygons(col = "blue") +
tm_shape(ten_cities) +
tm_text("Ancient Toponym", size = 1, auto.placement = 5) +
tm_dots(col = "yellow",
size = 0.1) +
tm_scale_bar(breaks = c(0, 10, 20),
text.size = 10,
position = c("LEFT", "bottom")) +
tm_compass(position = c("LEFT", "bottom"),
type = "rose",
size = 2) +
tm_credits(position = c("RIGHT", "top"),
text = "Hej hej, text") +
tm_layout(main.title = "Map with a scale",
bg.color = "beige",
inner.margins = c(0, 0, 0, 0))
tm_shape(ten_buffers)  +
tm_polygons(col = "blue") +
tm_shape(ten_cities) +
tm_text("Ancient Toponym", size = 1, auto.placement = 5) +
tm_dots(col = "yellow",
size = 0.1) +
tm_scale_bar(breaks = c(0, 10, 20, 30),
text.size = 10,
position = c("LEFT", "bottom")) +
tm_compass(position = c("LEFT", "bottom"),
type = "rose",
size = 2) +
tm_credits(position = c("RIGHT", "top"),
text = "Hej hej, text") +
tm_layout(main.title = "Map with a scale",
bg.color = "beige",
inner.margins = c(0, 0, 0, 0))
tm_shape(ten_buffers)  +
tm_polygons(col = "blue") +
tm_shape(ten_cities) +
tm_text("Ancient Toponym", size = 1, auto.placement = 5) +
tm_dots(col = "yellow",
size = 0.1) +
tm_scale_bar(breaks = c(0, 10, 20, 40),
text.size = 10,
position = c("LEFT", "bottom")) +
tm_compass(position = c("LEFT", "bottom"),
type = "rose",
size = 2) +
tm_credits(position = c("RIGHT", "top"),
text = "Hej hej, text") +
tm_layout(main.title = "Map with a scale",
bg.color = "beige",
inner.margins = c(0, 0, 0, 0))
tm_shape(ten_buffers)  +
tm_polygons(col = "blue") +
tm_shape(ten_cities) +
tm_text("Ancient Toponym", size = 1, auto.placement = 5) +
tm_dots(col = "yellow",
size = 0.1) +
tm_scale_bar(breaks = c(0, 5, 10, 20),
text.size = 10,
position = c("LEFT", "bottom")) +
tm_compass(position = c("LEFT", "bottom"),
type = "rose",
size = 2) +
tm_credits(position = c("RIGHT", "top"),
text = "Hej hej, text") +
tm_layout(main.title = "Map with a scale",
bg.color = "beige",
inner.margins = c(0, 0, 0, 0))
# Libraries
library(tidyverse)
library(jsonlite)
library(tidytext)
# Grab the first 10 elements in the sf object and the buffer
ten_buffers <- cities_5km %>% slice(1:10)
ten_cities <- cities_sf %>% slice(1:10)
# Create a quick tmap
library(tmap)
current.mode <- tmap_mode("plot")
tm_shape(ten_buffers)  +
tm_polygons(col = "blue") +
tm_shape(ten_cities) +
tm_text("Ancient Toponym", size = 1, auto.placement = 5) +
tm_dots(col = "yellow",
size = 0.1) +
tm_scale_bar(breaks = c(0, 5, 10, 20),
text.size = 10,
position = c("LEFT", "bottom")) +
tm_compass(position = c("LEFT", "bottom"),
type = "rose",
size = 2) +
tm_credits(position = c("RIGHT", "top"),
text = "Hej hej, text") +
tm_layout(main.title = "Map with a scale",
bg.color = "beige",
inner.margins = c(0, 0, 0, 0))
tm_shape(ten_buffers)  +
tm_polygons(col = "blue") +
tm_shape(ten_cities) +
tm_text("Ancient Toponym", size = 1, auto.placement = 5) +
tm_dots(col = "yellow",
size = 0.1) +
tm_scale_bar(breaks = c(0, 5, 10, 20),
text.size = 10,
position = c("LEFT", "bottom")) +
tm_compass(position = c("LEFT", "bottom"),
type = "rose",
size = 2) +
tm_credits(position = c("RIGHT", "top"),
text = "Hej hej, text") +
tm_layout(main.title = "Map with a scale",
bg.color = "beige",
inner.margins = c(0, 0, 0, 0))
3035
3035
3035
ten_cities <- cities_sf %>% slice(1:10)
# Create a quick tmap
library(tmap)
current.mode <- tmap_mode("plot")
tm_shape(ten_buffers)  +
tm_polygons(col = "blue") +
tm_shape(ten_cities) +
tm_text("Ancient Toponym", size = 1, auto.placement = 5) +
tm_dots(col = "yellow",
size = 0.1) +
tm_scale_bar(breaks = c(0, 5, 10, 20),
text.size = 10,
position = c("LEFT", "bottom")) +
tm_compass(position = c("LEFT", "bottom"),
type = "rose",
size = 2) +
tm_credits(position = c("RIGHT", "top"),
text = "Hej hej, text") +
tm_layout(main.title = "Map with a scale",
bg.color = "beige",
inner.margins = c(0, 0, 0, 0))
ten_cities <- cities_sf3035 %>% slice(1:10)
# Create a quick tmap
library(tmap)
current.mode <- tmap_mode("plot")
tm_shape(ten_buffers)  +
tm_polygons(col = "blue") +
tm_shape(ten_cities) +
tm_text("Ancient Toponym", size = 1, auto.placement = 5) +
tm_dots(col = "yellow",
size = 0.1) +
tm_scale_bar(breaks = c(0, 5, 10, 20),
text.size = 10,
position = c("LEFT", "bottom")) +
tm_compass(position = c("LEFT", "bottom"),
type = "rose",
size = 2) +
tm_credits(position = c("RIGHT", "top"),
text = "Hej hej, text") +
tm_layout(main.title = "Map with a scale",
bg.color = "beige",
inner.margins = c(0, 0, 0, 0))
library(tidytext)
# Download the file and save as inscriptions.json (consider commenting out after you first run to avoid repeat downloading)
download.file("https://sciencedata.dk/public/b6b6afdb969d378b70929e86e58ad975/EDH_subset_2021-02-15.json", "https://sciencedata.dk/public/b6b6afdb969d378b70929e86e58ad975/EDH_subset_2021-02-15.json/inscriptions.json")
tm_shape(ten_buffers)  +
tm_polygons(col = "blue") +
tm_shape(st_geometry(ten_cities)) +
tm_text("Ancient Toponym", size = 1, auto.placement = 5) +
tm_dots(col = "yellow",
size = 0.1) +
tm_scale_bar(breaks = c(0, 5, 10, 20),
text.size = 10,
position = c("LEFT", "bottom")) +
tm_compass(position = c("LEFT", "bottom"),
type = "rose",
size = 2) +
tm_credits(position = c("RIGHT", "top"),
text = "Hej hej, text") +
tm_layout(main.title = "Map with a scale",
bg.color = "beige",
inner.margins = c(0, 0, 0, 0))
tm_shape(ten_buffers)  +
tm_polygons(col = "blue") +
tm_shape(st_geometry(ten_cities)) +
tm_text("Ancient Toponym", size = 1, auto.placement = 5) +
tm_dots(col = "yellow",
size = 0.1) +
tm_scale_bar(breaks = c(0, 5, 10, 20),
text.size = 10,
position = c("LEFT", "bottom")) +
tm_compass(position = c("LEFT", "bottom"),
type = "rose",
size = 2) +
tm_credits(position = c("RIGHT", "top"),
text = "Hej hej, text") +
tm_layout(main.title = "Map with a scale",
bg.color = "beige",
inner.margins = c(0, 0, 0, 0))
tm_shape(ten_buffers)  +
tm_polygons(col = "blue") +
tm_shape(ten_cities) +
tm_text("Ancient Toponym", size = 1, auto.placement = 5) +
tm_dots(col = "yellow",
size = 0.1) +
tm_scale_bar(breaks = c(0, 5, 10, 20),
text.size = 10,
position = c("LEFT", "bottom")) +
tm_compass(position = c("LEFT", "bottom"),
type = "rose",
size = 2) +
tm_credits(position = c("RIGHT", "top"),
text = "Hej hej, text") +
tm_layout(main.title = "Map with a scale",
bg.color = "beige",
inner.margins = c(0, 0, 0, 0))
# Download the file and save as inscriptions.json (consider commenting out after you first run to avoid repeat downloading)
download.file("https://sciencedata.dk/public/b6b6afdb969d378b70929e86e58ad975/EDH_subset_2021-02-15.json", "https://sciencedata.dk/public/b6b6afdb969d378b70929e86e58ad975/EDH_subset_2021-02-15.json/inscriptions.json")
# Download the file and save as inscriptions.json (consider commenting out after you first run to avoid repeat downloading)
download.file("https://sciencedata.dk/public/b6b6afdb969d378b70929e86e58ad975/EDH_subset_2021-02-15.json", "data/inscriptions.json")
getwd()
# Download the file and save as inscriptions.json (consider commenting out after you first run to avoid repeat downloading)
download.file("https://sciencedata.dk/public/b6b6afdb969d378b70929e86e58ad975/EDH_subset_2021-02-15.json", "../data/inscriptions.json")
# Load it into R from wherever you put it, and convert into a tibble
list_json <- jsonlite::fromJSON("../data/inscriptions.json")
# Load it into R from wherever you put it, and convert into a tibble
list_json <- jsonlite::fromJSON("../data/inscriptions.json")
inscriptions = as_tibble(list_json)
# Check the first couple lines and column names
head(inscriptions)
# Check the first couple lines and column names
head(inscriptions)
# Check the first couple lines and column names
head(inscriptions)
# Check the first couple lines and column names
head(inscriptions)
# Check the first couple lines and column names
nrow(inscriptions)
ncol(inscriptions)
# Check the first couple lines and column names
nrow(inscriptions, 5)
# Check the first couple lines and column names
nrow(5, inscriptions)
# Check the first couple lines and column names
head(5, inscriptions)
# Check the first couple lines and column names
head(inscriptions, 5)
# Check the first couple lines and column names
st_crs(inscriptions)
inscriptions = as_tibble(list_json)
# Check the first couple lines and column names
head(inscriptions)
colnames(inscriptions)
# Check the first couple lines and column names
head(inscriptions)
# Check the first couple lines and column names
colnames(inscriptions)
head(inscriptions$coordinates)
head(inscriptions)
head(inscriptions$coordinates)
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>%
mutate(latitude = as.numeric(inscriptions$coordinates[1]),
longitude = as.numeric(inscriptions$coordinates[1]))
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>%
mutate(latitude = as.numeric(inscriptions$coordinates[1]),
longitude = as.numeric(inscriptions$coordinates[2]))
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>%
mutate(latitude = as.numeric("latitude"),
longitude = as.numeric("longitude"))
# Check the result of the subset, does the location look reasonable?
leaflet() %>% addTiles() %>% addMarkers(lng=i_sm$longitude,lat=i_sm$latitude)
# Check the result of the subset, does the location look reasonable?
leaflet(i_sm) %>% addTiles() %>% addMarkers(lng=i_sm$longitude,lat=i_sm$latitude)
View(i_sm)
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>%
mutate(latitude = as.numeric(latitude),
longitude = as.numeric(longitude))
# Check the result of the subset, does the location look reasonable?
leaflet() %>% addTiles() %>% addMarkers(lng=i_sm$longitude,lat=i_sm$latitude)
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>%
mutate(latitude = as.numeric(latitude),
longitude = as.numeric(longitude))
# Check the result of the subset, does the location look reasonable?
leaflet() %>% addTiles() %>% addMarkers(lng=i_sm$longitude,lat=i_sm$latitude)
# Load it into R from wherever you put it, and convert into a tibble
list_json <- jsonlite::fromJSON("../data/inscriptions.json")
# Load it into R from wherever you put it, and convert into a tibble
list_json <- jsonlite::fromJSON("../data/inscriptions.json")
inscriptions = as_tibble(list_json)
# Check the first couple lines and column names
colnames(inscriptions) # checking column names, from that it can be read that column number 30 consists of coordinates.
head(inscriptions$coordinates) #looking at the coordinates.
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>%
mutate(latitude = as.numeric(latitude),
longitude = as.numeric(longitude))
# Check the result of the subset, does the location look reasonable?
leaflet() %>% addTiles() %>% addMarkers(lng=i_sm$longitude,lat=i_sm$latitude)
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>%
mutate(latitude = as.numeric(latitude),
longitude = as.numeric(longitude))
