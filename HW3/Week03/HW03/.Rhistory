library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
library(sf)
library(raster)
# Read in the trees shapefile
trees <- st_read("data/trees.shp")
# Read in the trees shapefile
trees <- st_read("data/trees.shp")
View(trees)
# Read in the beech shapefile
beech <- st_read("data/beech.shp")
# Read in the neighborhood shapefile
neighborhoods <- st_read("data/neighborhoods.shp")
# Read in the tree canopy single-band raster
canopy <- raster("data/canopy.tif")
# Read in the manhattan Landsat image multi-band raster
manhattan <- brick("data/manhattan.tif")
# Project neighborhood shapefile to canopy
neighborhoods_crs <- st_transform(neighborhoods, crs = crs(canopy))
View(i_sm)
View(cities_sf3035)
View(inscriptions)
help("gsub")
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") #%>%
#mutate(latitude = as.numeric(____),
# longitude = as.numeric(_____))
i_sm
#mutate(latitude = as.numeric(____),
# longitude = as.numeric(_____))
i_sm$latitude
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>%
mutate(latitude = as.numeric(gsub(" ", "")),
longitude = as.numeric(" ", ""))
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>%
mutate(latitude = as.numeric(gsub( " ", "", latitude) )),
i_sm$latitude
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
library(sf)
library(raster)
library(tidyverse)
library(leaflet)
cities <- as.data.frame(read_csv("http://oxrep.classics.ox.ac.uk/oxrep/docs/Hanson2016/Hanson2016_Cities_OxREP.csv"))
# Convert the table into an sf object on the basis of X and Y columns
cities_sf <- st_as_sf(cities, coords = c("Longitude (X)", "Latitude (Y)"))
# Define the projection of Lat/Long coordinates as EPSG 4326
cities_sf4326<- st_set_crs(cities_sf, 4326)
#By creating setting the crs of cities_sf we create a markater map, which makes the map projectet (2D maps)
# Transform the projection to a 2D projection using EPSG 3035
cities_sf3035<- st_transform(cities_sf4326, 3035)
#Then it can be transformed to 3035 which sets the coordinates to Europe insted of America
# Verify the projection is 'projected' not 'geographic'
head(cities_sf3035)
#It can be read when running head that we are working with a projectet CRS, thus we are working with 2D maps.
st_crs(cities_sf3035)
# Make buffer of 5 km. Check the units of your object to correctly assign value to dist
cities_5km<- st_buffer(cities_sf3035,dist = 5000)
# Plot the first 10 buffers and cities to check result
plot(st_geometry(cities_5km)[1:10], col = "yellow")
plot(st_geometry(cities_sf3035)[1:10], pch=20, cex = 0.1, add = TRUE)
# Grab the first 10 elements in the sf object and the buffer
ten_buffers <- cities_5km %>% slice(1:10)
ten_cities <- cities_sf3035 %>% slice(1:10)
# Create a quick tmap
library(tmap)
current.mode <- tmap_mode("plot")
tm_shape(ten_buffers)  +
tm_polygons(col = "blue") +
tm_shape(ten_cities) +
tm_text("Ancient Toponym", size = 1, auto.placement = 5) +
tm_dots(col = "yellow",
size = 0.1) +
tm_scale_bar(breaks = c(0, 5, 10, 20),
text.size = 10,
position = c("LEFT", "bottom")) +
tm_compass(position = c("LEFT", "bottom"),
type = "rose",
size = 2) +
tm_credits(position = c("RIGHT", "top"),
text = "Hej hej, text") +
tm_layout(main.title = "Map with a scale",
bg.color = "beige",
inner.margins = c(0, 0, 0, 0))
library(tidyverse)
library(jsonlite)
library(tidytext)
# Load it into R from wherever you put it, and convert into a tibble
list_json <- jsonlite::fromJSON("../data/inscriptions.json")
# Load it into R from wherever you put it, and convert into a tibble
list_json <- jsonlite::fromJSON("../data/inscriptions.json")
inscriptions = as_tibble(list_json)
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") #%>%
#mutate(latitude = as.numeric(____),
#longitude = as.numeric(_____))
i_sm$latitude
View(inscriptions)
#mutate(latitude = as.numeric(____),
#longitude = as.numeric(_____))
i_sm$longitude
i_sm$longitude
i_sm$latitude
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>%
gsub((" ", "", latitude))
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>%
gsub((" ", "", i_sm$latitude))
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>%
gsub(" ", "", latitude)
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>%
gsub(" ", "", i_sm$latitude)
i_sm$latitude
i_sm$latitude
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") #%>%
i_sm$latitude
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") #%>%
i_sm$latitude
gsub((" ", "", latitude))
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>%
gsub((" ", "", latitude))
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>%
gsub((" ", "", "latitude"))
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>%
gsub( " ", "", latitude)
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>%
gsub( " ", "", i_sm$latitude)
i_sm$latitude
#mutate(latitude = as.numeric(____),
#longitude = as.numeric(_____))
i_sm$longitude
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") #%>%
i_sm$longitude
i_sm2 <- i_sm %>%
gsub(" ", "", i_sm$latitude)
i_sm2$latitude
i_sm2
i_sm2 <- i_sm %>%
gsub(" ", "", i_sm2)
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") #%>%
i_sm$latitude
longitude = gsub(" ", "", longitude)#as.numeric(_____))
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
mutate(latitude = as.numeric(latitude),
longitude = as.numeric(longitude))
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>%
mutate(latitude = as.numeric(latitude),
longitude = as.numeric(longitude))
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>%
mutate(latitude = gsub(" ", "", latitude), # = as.numeric(latitude),
longitude = as.numeric(longitude))
i_sm$latitude
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>%
mutate(latitude = gsub(" "|")", "", latitude), # = as.numeric(latitude),
longitude = as.numeric(longitude))
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>%
mutate(latitude = gsub(" "||")", "", latitude), # = as.numeric(latitude),
longitude = as.numeric(longitude))
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>%
mutate(latitude = gsub(" " ")", "", latitude), # = as.numeric(latitude),
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>%
mutate(latitude = gsub(")", "", latitude), # = as.numeric(latitude),
longitude = as.numeric(longitude))
i_sm$latitude
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>%
mutate(latitude = gsub(")", "", latitude), # = as.numeric(latitude),
latitude = gsub(" ", "", latitude),
longitude = as.numeric(longitude))
i_sm$latitude
i_sm$longitude
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") #%>%
i_sm$longitude
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") #%>%
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>%
mutate(latitude = gsub(")", "", latitude), # = as.numeric(latitude),
latitude = gsub(" ", "", latitude),
longitude = gsub("(c", "", longitude))# as.numeric(longitude))
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>%
mutate(latitude = gsub(")", "", latitude), # = as.numeric(latitude),
latitude = gsub(" ", "", latitude),
longitude = gsub("(", "", longitude))# as.numeric(longitude))
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>%
mutate(latitude = gsub(")", "", latitude), # = as.numeric(latitude),
latitude = gsub(" ", "", latitude),
longitude = gsub("(c", "", longitude))# as.numeric(longitude))
i_sm$longitude
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>%
mutate(latitude = gsub(")", "", latitude), # = as.numeric(latitude),
latitude = gsub(" ", "", latitude),
longitude = gsub("c(", "", longitude))# as.numeric(longitude))
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>%
mutate(latitude = gsub(")", "", latitude), # = as.numeric(latitude),
latitude = gsub(" ", "", latitude),
longitude = gsub("(", "", longitude))# as.numeric(longitude))
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>%
mutate(latitude = gsub(")", "", latitude), # = as.numeric(latitude),
latitude = gsub(" ", "", latitude),
longitude = gsub("c", "", longitude))# as.numeric(longitude))
i_sm$longitude
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>%
mutate(latitude = gsub(")", "", latitude), # = as.numeric(latitude),
latitude = gsub(" ", "", latitude),
longitude = gsub("c", "", longitude),
longitude = gsub("(", "", longitude))# as.numeric(longitude))
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>%
mutate(latitude = gsub(")", "", latitude), # = as.numeric(latitude),
latitude = gsub(" ", "", latitude),
longitude = gsub("c", "", longitude),
longitude = gsub("\(", "", longitude))# as.numeric(longitude))
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>%
mutate(latitude = gsub(")", "", latitude), # = as.numeric(latitude),
latitude = gsub(" ", "", latitude),
longitude = gsub("c", "", longitude),
longitude = gsub("(", "", longitude))# as.numeric(longitude))
i_sm$longitude
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>%
mutate(latitude = gsub(")", "", latitude), # = as.numeric(latitude),
latitude = gsub(" ", "", latitude),
longitude = gsub("c", "", longitude),
longitude = gsub("\\(", "", longitude))# as.numeric(longitude))
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>%
mutate(latitude = gsub(")", "", latitude), # = as.numeric(latitude),
latitude = gsub(" ", "", latitude),
longitude = gsub("c", "", longitude),
longitude = gsub("\\(", "", longitude),
latitude = as.numeric(latitude),
longitude = as.numeric(longitude))# as.numeric(longitude))
i_sm$latitude
class(i_sm$latitude)
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>%
mutate(latitude = gsub(")", "", latitude),
latitude = gsub(" ", "", latitude),
longitude = gsub("c", "", longitude),
longitude = gsub("\\(", "", longitude),
latitude = as.numeric(latitude),
longitude = as.numeric(longitude))
class(i_sm$longitude)
# Check the result of the subset, does the location look reasonable?
leaflet() %>% addTiles() %>% addMarkers(lng=i_sm$longitude,lat=i_sm$latitude)
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") #%>%
class(i_sm$latitude)
(i_sm$latitude)
i_sm$longitude)
i_sm$longitude
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>%
# When looking at how the latitude looks after it is split it, can be seen that it looks like this: " 40.8472)" and the longitude as this: "c(14.0551". But it is posible to remove them with gsub:
mutate(latitude = gsub(")", "", latitude),
latitude = gsub(" ", "", latitude),
longitude = gsub("c", "", longitude),
longitude = gsub("\\(", "", longitude),
#After the non numeric characters have been removed, the 2 rows are converted from strings to numerics:
latitude = as.numeric(latitude),
longitude = as.numeric(longitude))
class(i_sm$latitude)
class(i_sm$longitude)
# Check the result of the subset, does the location look reasonable?
leaflet() %>% addTiles() %>% addMarkers(lng=i_sm$longitude,lat=i_sm$latitude)
# Wrangle the coordinates into a plottable  format
i_sm <- inscriptions %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>%
# When looking at how the latitude looks after it is split it, can be seen that it looks like this: " 40.8472)" and the longitude as this: "c(14.0551". But it is posible to remove them with gsub:
mutate(latitude = gsub(")", "", latitude),
latitude = gsub(" ", "", latitude),
longitude = gsub("c", "", longitude),
longitude = gsub("\\(", "", longitude),
#After the non numeric characters have been removed, the 2 rows are converted from strings to numerics:
latitude = as.numeric(latitude),
longitude = as.numeric(longitude)) %>%
filter(!is.na(latitude)) %>%
filter(!is.na(longitude)) %>%
filter(longitude > 5 && longitude < 20)
View(i_sm)
i <- inscriptions %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>%
mutate(latitude = gsub(")", "", latitude),
latitude = gsub(" ", "", latitude),
longitude = gsub("c", "", longitude),
longitude = gsub("\\(", "", longitude),
#After the non numeric characters have been removed, the 2 rows are converted from strings to numerics:
latitude = as.numeric(latitude),
longitude = as.numeric(longitude)) %>%
filter(!is.na(latitude)) %>%
filter(!is.na(longitude)) %>%
filter(longitude > 5 && longitude < 20)
class(i)
# Create a sf object
insc_sf4326 <- st_as_sf(i, coords = c("longitude", "latitude"), crs = 4326)
# Plot
plot(st_geometry(insc_sf4326))
# Project the sf object into EPSG3035 so it is consistent with cities and their buffers
insc_sf3035 <- st_transform(insc_sf4326, crs = 3035)
# Create a convex hull around the inscriptions's points dissolved into a MULTIPOINT
insc_ch <- st_convex_hull(st_multipoint(insc_sf3035))
# Create a convex hull around the inscriptions's points dissolved into a MULTIPOINT
insc_ch <- st_convex_hull(st_union(insc_sf3035))
class(insc_ch)
# Create a buffer from a cluster of cities that fall within the convex hull
cities_it <- st_intersection(insc_ch, buffer(cities_5km))
# Create a buffer from a cluster of cities that fall within the convex hull
cities_it <- st_intersection(insc_ch, st_convex_hull(cities_5km))
# Dissolve the 399 buffers into a single MULTIPOLYGON buffer feature
c_buff <- st_union(cities_it)
insc_rural <- st_difference(insc_sf3035, c_buff)
insc_rural <- st_difference(insc_sf3035, c_buff)
# Calculate the number of inscriptions in urban and rural areas. This may take a couple seconds
insc_urban <- ____________(insc_sf3035, c_buff)
# Calculate the number of inscriptions in urban and rural areas. This may take a couple seconds
insc_urban <- st_intersection(insc_sf3035, c_buff)
View(insc_rural)
View(insc_rural)
View(c_buff)
convex_hull
View(insc_ch)
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
library(sf)
library(raster)
library(raster)
library(tidyverse)
library(leaflet)
cities <- as.data.frame(read_csv("http://oxrep.classics.ox.ac.uk/oxrep/docs/Hanson2016/Hanson2016_Cities_OxREP.csv"))
# Convert the table into an sf object on the basis of X and Y columns
cities_sf <- st_as_sf(cities, coords = c("Longitude (X)", "Latitude (Y)"))
# Define the projection of Lat/Long coordinates as EPSG 4326
cities_sf4326<- st_set_crs(cities_sf, 4326)
# Transform the projection to a 2D projection using EPSG 3035
cities_sf3035<- st_transform(cities_sf4326, 3035)
#It can be read when running head that we are working with a projectet CRS, thus we are working with 2D maps.
st_crs(cities_sf3035)
# Make buffer of 5 km. Check the units of your object to correctly assign value to dist
cities_5km<- st_buffer(cities_sf3035,dist = 5000)
plot(st_geometry(cities_sf3035)[1:10], pch=20, cex = 0.1, add = TRUE)
plot(st_geometry(cities_5km)[1:10], col = "yellow")
plot(st_geometry(cities_sf3035)[1:10], pch=20, cex = 0.1, add = TRUE)
# Grab the first 10 elements in the sf object and the buffer
ten_buffers <- cities_5km %>% slice(1:10)
ten_cities <- cities_sf3035 %>% slice(1:10)
# Create a quick tmap
library(tmap)
# Create a quick tmap
library(tmap)
current.mode <- tmap_mode("plot")
tm_shape(ten_buffers)  +
tm_polygons(col = "blue") +
tm_shape(ten_cities) +
tm_text("Ancient Toponym", size = 1, auto.placement = 5) +
tm_dots(col = "yellow",
size = 0.1) +
tm_scale_bar(breaks = c(0, 5, 10, 20),
text.size = 10,
position = c("LEFT", "bottom")) +
tm_compass(position = c("LEFT", "bottom"),
type = "rose",
size = 2) +
tm_credits(position = c("RIGHT", "top"),
text = "Hej hej, text") +
tm_layout(main.title = "Map with a scale",
bg.color = "beige",
inner.margins = c(0, 0, 0, 0))
# Libraries
library(tidyverse)
library(jsonlite)
library(tidytext)
# Load it into R from wherever you put it, and convert into a tibble
list_json <- jsonlite::fromJSON("../data/inscriptions.json") #writing the path to the folder where the file can be accesed.
